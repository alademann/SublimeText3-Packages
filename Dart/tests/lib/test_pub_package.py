# Copyright (c) 2014, Guillermo LÃ³pez-Anglada. Please see the AUTHORS file for details.
# All rights reserved. Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.)

import sublime

from tempfile import TemporaryDirectory
from tempfile import NamedTemporaryFile
from unittest import mock
import os
import unittest
from contextlib import contextmanager

from Dart.lib.pub_package import PubspecFile
from Dart.lib.pub_package import PubPackage
from Dart.lib.pub_package import DartFile


VALID_PUBSPEC_CONTENT = '''name: foo
version: 0.10
'''

VALID_PUBSPEC_LOCK_CONTENT = '''# Generated by pub
# See http://pub.dartlang.org/doc/glossary.html#lockfile
packages: {}
'''

def make_package(pubspec=True, dirs=['web']):
    '''Helper to create a folder structure resembling a pub-compliant package.

    @pubspec
      Whether to create a pubspec.yaml file.

    @dirs
      List of subdirs to create within the package.
    '''
    tmp_dir = TemporaryDirectory()
    pubspec_path = ''
    if pubspec:
        pubspec_path = os.path.join(tmp_dir.name, 'pubspec.yaml')
        open(pubspec_path, 'w').close()
    for subdir in dirs:
        os.mkdir(os.path.join(tmp_dir.name, subdir))
    return pubspec_path, tmp_dir


class Test_PubspecFile(unittest.TestCase):
    def testInitCanFail(self):
        p = PubspecFile.from_path('???')
        self.assertEqual(p, None)

    def testInitCanSucceed(self):
        with TemporaryDirectory() as d:
            fname = os.path.join(d, 'pubspec.yaml')
            with open(fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)
            p = PubspecFile.from_path(fname)
            self.assertEqual(fname, p.path)

    def testCanFindParent(self):
        with TemporaryDirectory() as d:
            fname = os.path.join(d, 'pubspec.yaml')
            with open(fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)
            p = PubspecFile.from_path(fname)
            self.assertEqual(d, p.parent)

    def testCanFailToRetrievePubspecLock(self):
        with TemporaryDirectory() as d:
            fname = os.path.join(d, 'pubspec.yaml')
            with open(fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)
            p = PubspecFile.from_path(fname)
            self.assertEqual(None, p.get_pubspec_lock())

    def testCanRetrievePubspecLock(self):
        with TemporaryDirectory() as d:
            pubspec_fname = os.path.join(d, 'pubspec.yaml')

            with open(pubspec_fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)

            pubspec_lock_fname = os.path.join(d, 'pubspec.lock')
            with open(pubspec_lock_fname, 'wt') as f:
                f.write(VALID_PUBSPEC_LOCK_CONTENT)

            p = PubspecFile.from_path(pubspec_fname)
            self.assertEqual(pubspec_lock_fname, p.get_pubspec_lock().path)


class Test_PubPackage(unittest.TestCase):
    def setUp(self):
        self.d = TemporaryDirectory()
        fname = os.path.join(self.d.name, 'pubspec.yaml')
        with open(fname, 'wt') as f:
            f.write(VALID_PUBSPEC_CONTENT)
        self.pubspec = PubspecFile.from_path(fname)
        self.pub_package = PubPackage(self.pubspec)

    def tearDown(self):
        self.d.cleanup()

    def testInitCanFail(self):
        p = PubPackage.from_path('???')
        self.assertEqual(p, None)

    def testInitCanSucceed(self):
        p = PubPackage.from_path(self.d.name)
        self.assertEqual(self.d.name, p.pubspec.parent)

    def testCanMakeTopLevelDir(self):
        self.assertFalse(os.path.exists(os.path.join(self.d.name, 'web')))
        self.pub_package.make_top_level_dir('web')
        self.assertTrue(os.path.exists(os.path.join(self.d.name, 'web')))

    def test_is_prefix_RaisesExceptionIfPrefixIsNone(self):
        self.assertRaises(AssertionError, self.pub_package.is_prefix, None, 'bar')

    def test_is_prefix_RaisesExceptionIfPathIsNone(self):
        self.assertRaises(AssertionError, self.pub_package.is_prefix, 'foo', None)

    def test_is_prefix_RaisesExceptionIfPathAndPrefixAreNone(self):
        self.assertRaises(AssertionError, self.pub_package.is_prefix, None, None)

    def test_is_prefix_ReturnsFalseIfPathIsNotPrefixed(self):
        self.assertFalse(self.pub_package.is_prefix('foo', 'bar'))

    def test_is_prefix_ReturnsTrueIfPathIsPrefixed(self):
        # TODO(guillermooo): Perhaps this should return false; we probably want to know
        # whether 'path' is a subdir of 'prefix', not just a suffix.
        self.assertTrue(self.pub_package.is_prefix('foo', 'foobar'))

    def test_is_prefix_ReturnsTrueIfPathIsSubdirOfPrefix(self):
        # TODO(guillermooo): Perhaps this should return false; we probably want to know
        # whether 'path' is a subdir of 'prefix', not just a suffix.
        prefix = os.path.join('foo', 'bar')
        path = os.path.join('foo', 'bar', 'baz')
        self.assertTrue(self.pub_package.is_prefix(prefix, path))

    def test__get_top_level_dir_ReturnsNoneIfPathDoesNotExist(self):
        self.assertEqual(self.pub_package._get_top_level_dir('web'), None)

    def test__get_top_level_dir_CanSucceed(self):
        self.pub_package.make_top_level_dir('web')
        self.assertTrue(os.path.exists(os.path.join(self.pub_package.pubspec.parent, 'web')))

    def testKnowsAboutWellKnownPaths(self):
        self.pub_package.make_top_level_dir('web')
        self.pub_package.make_top_level_dir('bin')
        self.pub_package.make_top_level_dir('test')
        self.pub_package.make_top_level_dir('tool')
        self.pub_package.make_top_level_dir('benchmark')
        self.pub_package.make_top_level_dir('doc')
        self.pub_package.make_top_level_dir('example')
        self.pub_package.make_top_level_dir('lib')

        self.assertTrue(os.path.exists(self.pub_package.path_to_web))
        self.assertTrue(os.path.exists(self.pub_package.path_to_bin))
        self.assertTrue(os.path.exists(self.pub_package.path_to_test))
        self.assertTrue(os.path.exists(self.pub_package.path_to_tool))
        self.assertTrue(os.path.exists(self.pub_package.path_to_benchmark))
        self.assertTrue(os.path.exists(self.pub_package.path_to_doc))
        self.assertTrue(os.path.exists(self.pub_package.path_to_example))
        self.assertTrue(os.path.exists(self.pub_package.path_to_lib))


class Test_DartFile(unittest.TestCase):
    def setUp(self):
        self.v = sublime.active_window().new_file()

    def tearDown(self):
        self.v.close()

    @contextmanager
    def open_file(self, fname):
        try:
            view = sublime.active_window().open_file(fname)
            yield view
        except Exception as e:
            raise
        finally:
            view.close()

    def testCanInit(self):
        df = DartFile(self.v)
        self.assertEqual(df.view, self.v)

    def test_has_prefix_RaisesAssertionErrorIfCalledWithNone(self):
        df = DartFile(self.v)
        self.assertRaises(AssertionError, df.has_prefix, None)

    def test_has_prefix_FailsWhenExpected(self):
        f = NamedTemporaryFile(suffix='.dart')
        with self.open_file(f.name) as view:
            df = DartFile(view)
            self.assertFalse(df.has_prefix('?xxx?'))
        f.close()

    def test_has_prefix_CanSucceed(self):
        f = NamedTemporaryFile(suffix='.dart')
        with self.open_file(f.name) as view:
            df = DartFile(view)
            self.assertTrue(df.has_prefix(os.path.dirname(f.name)))
        f.close()

    def test_is_dart_file_CanSucceed(self):
        f = NamedTemporaryFile(suffix='.dart')
        with self.open_file(f.name) as view:
            df = DartFile(view)
            self.assertTrue(df.is_dart_file)
        f.close()

    def test_is_dart_file_FailsWhenExpected(self):
        f = NamedTemporaryFile(suffix='.js', delete=True)
        with self.open_file(f.name) as view:
            df = DartFile(view)
            self.assertFalse(df.is_dart_file)
        f.close()

    def test_is_pubspec_CanSucceed(self):
        with TemporaryDirectory() as d:
            fname = os.path.join(d, 'pubspec.yaml')
            with open(fname, 'w'):
                pass
            with self.open_file(fname) as view:
                df = DartFile(view)
                self.assertTrue(df.is_pubspec)

    def test_is_pubspec_FailsWhenExpected(self):
        f = NamedTemporaryFile(suffix='.js', delete=True)
        with self.open_file(f.name) as view:
            df = DartFile(view)
            self.assertFalse(df.is_pubspec)
        f.close()

    def test_is_example_CanSucceed(self):
        _, tmp_dir = make_package(dirs=['example'])
        fname = os.path.join(tmp_dir.name, 'example', 'foo.dart')
        open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertTrue(df.is_example)
        tmp_dir.cleanup()

    def test_is_example_FailsWhenExpected(self):
        _, tmp_dir = make_package(dirs=['bin'])
        fname = os.path.join(tmp_dir.name, 'bin', 'foo.dart')
        open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertFalse(df.is_example)
        tmp_dir.cleanup()

    def test_is_web_app_FailsIfNoPubPackageAvailable(self):
        _, tmp_dir = make_package(pubspec=False, dirs=['web'])
        fname = os.path.join(tmp_dir.name, 'web', 'foo.dart')
        open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertFalse(df.is_web_app)
        tmp_dir.cleanup()

    def test_is_web_app_ReturnsTrueIfFileUnderWeb(self):
        _, tmp_dir = make_package(pubspec=True, dirs=['web'])
        fname = os.path.join(tmp_dir.name, 'web', 'foo.dart')
        open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertTrue(df.is_web_app)
        tmp_dir.cleanup()

    def test_is_web_app_ReturnsTrueIfFileUnderExample(self):
        _, tmp_dir = make_package(pubspec=True, dirs=['example'])
        fname = os.path.join(tmp_dir.name, 'example', 'foo.dart')
        open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertTrue(df.is_web_app)
        tmp_dir.cleanup()

    def test_is_web_app_ReturnsFalseIfFileUnderOtherDirectory(self):
        _, tmp_dir = make_package(pubspec=True, dirs=['example', 'bin'])
        fname = os.path.join(tmp_dir.name, 'bin', 'foo.dart')
        open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertFalse(df.is_web_app)
        tmp_dir.cleanup()

    def test_is_web_app_ReturnsFalseIfWebAndExampleDirsMissing(self):
        _, tmp_dir = make_package(pubspec=True, dirs=['doc', 'bin'])
        fname = os.path.join(tmp_dir.name, 'bin', 'foo.dart')
        open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertFalse(df.is_web_app)
        tmp_dir.cleanup()

    def test_is_web_app_ReturnsFalseIfWebDirMissing(self):
        _, tmp_dir = make_package(pubspec=True, dirs=['example', 'bin'])
        fname = os.path.join(tmp_dir.name, 'bin', 'foo.dart')
        f = open(fname, 'w').close()
        with self.open_file(fname) as view:
            df = DartFile(view)
            self.assertFalse(df.is_web_app)
        tmp_dir.cleanup()
